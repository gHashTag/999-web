import { supabase } from "@/utils/supabase";

import { Bot, Context, webhookCallback } from "grammy";
import { bot } from "@/utils/telegram/bot";
import { createRoom } from "@/helpers/api/create-room";
import { createUser } from "@/helpers/api/create-user";

import { checkUsername } from "@/hooks/useSupabase";

bot.command("start", async (ctx) => {
  await ctx.replyWithChatAction("typing");

  ctx.reply(
    `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ, ${ctx.update.message?.from.first_name}! –í—Å–µ–º–æ–≥—É—â–∞—è –ë–∞–±–∞ –Ø–≥–∞, –≤–ª–∞–¥—ã—á–∏—Ü–∞ —Ç–∞–π–Ω –∏ —á–∞—Ä–æ–¥–µ–π–Ω–∏—Ü–∞, –ø—Ä–µ–¥ –≤—Ä–∞—Ç–∞ –Ω–µ–≤–µ–¥–æ–º–æ–≥–æ –º–∏—Ä–∞ —Ç–µ–±—è –ø—Ä–∏–≤–µ—á–∞–µ—Ç. –ß—Ç–æ–± –∏–∑–±–∞ –∫ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∫–æ–º –æ–±–µ—Ä–Ω—É–ª–∞—Å—å, –∞ –Ω–µ –∑–∞–¥–æ–º —Å—Ç–æ—è–ª–∞, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ—à–µ–ø—Ç–∞—Ç—å –∫–∞–±—ã —Å–ª–æ–≤–µ—á–∫–æ-–ø—Ä–æ—Ö–æ–¥–Ω–æ–µ.`,
    {
      reply_markup: {
        force_reply: true,
      },
    }
  );
  createUser(ctx);
});

bot.on("message", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º (–µ—Å—Ç—å –ª–∏ reply_to_message)
  if (ctx.message.reply_to_message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalMessageText = ctx.message.reply_to_message.text;
    // console.log(originalMessageText, "originalMessageText");
    if (
      originalMessageText &&
      originalMessageText.includes("üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
    ) {
      console.log(ctx, "ctx");

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const inviteCode = ctx.message.text;
      console.log(inviteCode, "inviteCode");
      // –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const { isInviterExist, invitation_codes, inviter_user_id } =
        await checkUsername(inviteCode as string);
      console.log(invitation_codes, "invitation_codes");
      console.log(isInviterExist, "isInviterExist");
      try {
        if (isInviterExist) {
          const newUser = {
            first_name: ctx.message.from.first_name,
            last_name: ctx.message.from.last_name,
            username: ctx.message.from.username,
            language_code: ctx.message.from.language_code,
            telegram_id: ctx.message.from.id,
            inviter: inviter_user_id,
            invitation_codes,
          };
          console.log(newUser, "newUser");

          const { data, error } = await supabase
            .from("users")
            .insert([{ ...newUser }]);
          console.log(data, "data");
          console.log(error, "users error");

          const isPayment = true;

          ctx.reply(
            `üè∞ –ë–ª–∞–≥–æ–≤–æ–ª–∏ –≤–æ–π—Ç–∏ –≤ –≤–æ–ª—à–µ–±–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¢—Ä–∏–¥–µ–≤—è—Ç–æ–≥–æ –¶–∞—Ä—Å—Ç–≤–∞, –≥–¥–µ —Å–∫–∞–∑–∞–Ω–∏–µ –æ–∂–∏–≤–∞–µ—Ç, –∞ —á—É–¥–µ—Å–∞ —Å–∞–º–æ —Å–æ–±–æ–π —Ä—è–¥–æ–º —Å—Ç—É–ø–∞—é—Ç. ${ctx.update.message?.from.first_name}!`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É",
                      callback_data: "create_room",
                    },
                  ],
                ],
              },
            }
          );
        } else {
          ctx.reply(
            `üîí –û—Ö, —É–≤—ã –∏ –∞—Ö! –°–ª–æ–≤–µ—á–∫–æ, —á—Ç–æ –¥–æ –º–µ–Ω—è –¥–æ—à–ª–æ, —á–∞—Ä–∞–º —Ç–∞–π–Ω—ã–º –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ—à—É, –¥–∞–π –∑–Ω–∞—Ç—å –∏–Ω–æ–µ, —á—Ç–æ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º, —á—Ç–æ–± –ø—É—Ç—å —Ç–≤–æ–π –≤ —Ü–∞—Ä—Å—Ç–≤–æ –¥–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—É–º–µ–ª–∏ –±–µ–∑ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è.`
          );
        }
      } catch (error) {
        ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`);
      }
    }

    if (
      originalMessageText?.includes(
        "üóùÔ∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≤–∞—à–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å –ª–∏—á–Ω—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –≤—ã–¥–∞–Ω–Ω—ã–π BotFather."
      )
    ) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const inviteCode = ctx.message.text;
      const token = ctx.update.message.text;
      console.log(token, "token");
      // –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

      const newData = {
        name: "Izbuzka",
        type: "meets",
        username: ctx.message.from.username,
        token,
        chat_id: ctx.message.chat.id,
        lang: ctx.message.from.language_code,
      };

      try {
        await createRoom(newData);

        ctx.reply(
          `‚ú® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–∑–±—É—à–∫–∞, –¥–∞–±—ã –æ—Ç–Ω—ã–Ω–µ –º–æ–≥–ª–∏ –≤—ã —Å–ª–æ–≤–µ—Å–Ω—ã–π –æ–±–º–µ–Ω —Ç–≤–æ—Ä–∏—Ç—å –∏ –∑–µ–º–ª—è–∫–æ–≤ —Å–≤–æ–∏—Ö –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∏–∑—ã–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –∏–º —Å–ª–æ–≤–µ—á–∫–æ –ø—Ä–æ—Ö–æ–¥–Ω–æ–µ.`
        );
        ctx.reply(
          `üåå –ö–ª—é—á –∫–æ –≤—Ä–∞—Ç–∞–º –¢—Ä–∏–¥–µ–≤—è—Ç–æ–≥–æ –¶–∞—Ä—Å—Ç–≤–∞, –≥–¥–µ –º–µ—á—Ç—ã —Ç–≤–æ–∏ –æ–±—Ä–µ—Ç—É—Ç –æ–±—Ä–∞–∑, –∏ –º–∞–≥–∏—è –ø–ª–µ—Ç—ë—Ç—Å—è –ø–æ –≤–æ–ª–µ —Ç–≤–æ–µ–π. –°–∏–µ —Å–ª–æ–≤–µ—á–∫–æ –ø—Ä–æ—Ö–æ–¥–Ω–æ–µ –æ—Ç–≤–æ—Ä–∏—Ç –¥–≤–µ—Ä–∏ –∏–∑–±—É—à–∫–∏ –Ω–∞ –∫—É—Ä—å–∏—Ö –Ω–æ–∂–∫–∞—Ö, –≤–µ–¥—É—â–µ–π —Ç–µ–±—è –∫ —Ç–∞–π–Ω–∞–º –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º –∏ —á—É–¥–µ—Å–∞–º –Ω–µ–∑—Ä–∏–º—ã–º.\n\nüóùÔ∏è –°–ª–æ–≤–µ—á–∫–æ: ${ctx.message.from.username}\nüè∞ –í—Ö–æ–¥ –≤ –¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ –¶–∞—Ä—Å—Ç–≤–æ: @dao999nft_dev_bot`
        );
      } catch (error) {
        ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`);
      }
    }
  }
});

bot.on("callback_query:data", async (ctx) => {
  await ctx.replyWithChatAction("typing");
  const callbackData = ctx.callbackQuery.data;

  if (callbackData === "create_room") {
    try {
      ctx.reply(
        "üóùÔ∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –≤–∞—à–µ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ —Å –ª–∏—á–Ω—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –≤—ã–¥–∞–Ω–Ω—ã–π BotFather.",
        {
          reply_markup: {
            force_reply: true,
          },
        }
      );
    } catch (error) {
      console.error(error);
    }
  }
});

// bot.on("message:text", async (ctx) => {
//   await ctx.replyWithChatAction("typing");
//   const text = ctx.message.text;
//   try {
//     const feedback = await getAiFeedback(text);
//     await ctx.reply(feedback, { parse_mode: "Markdown" });
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
//   }
// });

bot.start();

export default async function handler(req: any, res: any) {
  const handleUpdate = webhookCallback(bot, "std/http");

  try {
    handleUpdate(req, res);
    res.status(200).end();
  } catch (err) {
    console.error(err);
  }
}

const checkOrCreateUser = async (req: any) => {
  if (req.body.message.from) {
    const { first_name, last_name, username, is_bot, language_code, id } =
      req.body.message.from;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
    const { data: existingUser, error } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", id)
      .maybeSingle();

    if (error && error.message !== "No rows found") {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if (existingUser) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", existingUser);
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    const usersData = {
      first_name,
      last_name,
      username,
      is_bot,
      language_code,
      telegram_id: id,
      email: "",
      avatar: "",
    };

    const { data, error: insertError } = await supabase
      .from("users")
      .insert([usersData]);

    if (insertError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", insertError);
      return;
    }
  } else {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }
};
