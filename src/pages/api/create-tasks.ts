import type { NextApiRequest, NextApiResponse } from "next";
import { supabase } from "@/utils/supabase";
import { RoomNode } from "@/types";
import { corsHeaders, headers } from "@/helpers/headers";
import NextCors from "nextjs-cors";
import { Bot } from "grammy";
import { translateText } from "@/helpers/api/translateText";
import { createChatCompletion } from "@/helpers/api/createChatCompletion";
import { da } from "@faker-js/faker";

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN || "");

const targetLanguage = "ru";

type Task = {
  assignee: {
    user_id: string;
    first_name: string;
    last_name: string;
    username: string;
  };
  title: string;
  description: string;
};

async function sendTasksToTelegram(
  chatId: number,
  tasks: Task[],
  summary_short: string,
) {
  const messageText = tasks.map((task) =>
    `Task: ${task.title}\nDescription: ${task.description}\nüßëüèªAssignee: ${task.assignee.first_name} ${task.assignee.last_name} (@${task.assignee.username})`
  ).join("\n\n");

  const translatedSummaryShort = await translateText(
    summary_short,
    targetLanguage,
  );

  const translatedMessageText = await translateText(
    messageText,
    targetLanguage,
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Telegram
  await bot.api.sendMessage(
    chatId,
    `üöÄ ${translatedSummaryShort}\n\n${translatedMessageText})
    `,
  );
}

const getPreparedUsers = (usersFromSupabase: any) => {
  return usersFromSupabase.map((user: any) => {
    const concatName = () => {
      if (!!user.first_name && !user.last_name) {
        return user?.first_name;
      }
      if (!user.first_name && !!user.last_name) {
        return user.last_name;
      }
      if (!!user.first_name && !!user.last_name) {
        return `${user?.first_name} ${user?.last_name}`;
      }
    };
    return ({
      ...user,
      concat_name: concatName(),
    });
  });
};

type ResponseData = {
  message?: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>,
) {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: { ...corsHeaders, ...headers } });
  }
  await NextCors(req, res, {
    // Options
    methods: ["GET", "HEAD", "PUT", "PATCH", "POST", "DELETE"],
    origin: "*",
    optionsSuccessStatus: 200,
  });

  try {
    const { type, data } = await req.body;
    // console.log(data, 'data')
    // console.log(type, 'type')
    if (type === "transcription.success") {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const transcriptTextPresignedUrl = data.transcript_txt_presigned_url;
      console.log(transcriptTextPresignedUrl, "transcriptTextPresignedUrl");

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const transcriptResponse = await fetch(transcriptTextPresignedUrl);
        const contentType = transcriptResponse.headers.get("Content-Type");
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", contentType);
        console.error(`–û—à–∏–±–∫–∞: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ - ${transcriptResponse.status}`);
       
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é");
        const text = await transcriptResponse.text();
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", text); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
      
        //   try {
        //     const data = JSON.parse(text); // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ JSON
        //     console.log(data, "data");
        //     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
        //   } catch (error) {
        //     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON:", error);
        //     // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞–∑–±–æ—Ä–∞ JSON
        //   }
        // } else {
        //   console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", contentType);
        //   // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON
        // }
        // if (!transcriptResponse.ok) {
        //   // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        //   console.error(`–û—à–∏–±–∫–∞: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ - ${transcriptResponse.status}`);
        //   const errorText = await transcriptResponse.text();
        //   console.error(`–¢–µ–ª–æ –æ—à–∏–±–∫–∏: ${errorText}`);
        //   throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é");
        // }

      
      // const text = await transcriptResponse.text();
      // console.log(text, "text");
      // const transcription = JSON.parse(text);
      // console.log("transcription", transcription);
      // const summaryJsonPresignedUrl = data.summary_json_presigned_url;
      // console.log(summaryJsonPresignedUrl, "summaryJsonPresignedUrl");
      // // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      // const summaryJSONResponse = await fetch(summaryJsonPresignedUrl);
      // if (!summaryJSONResponse.ok) {
      //   throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å transcriptJSONResponse");
      // }
      // const summaryResponse = await summaryJSONResponse.json();
      // console.log(summaryResponse, "summaryResponse");
      // —Å–æ–∑–¥–∞—Ç—å title c —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —á–µ—Ä–µ–∑ GPT –∏–∑ summaryResponse

      // const summarySection = summaryResponse.sections.find((
      //   section: {
      //     title: string;
      //     format: string;
      //     bullets: string[];
      //     paragraph: string;
      //   },
      // ) => section.title === "Short Summary");
      // console.log(summarySection, "summarySection");
      // const summary_short = summarySection ? summarySection.paragraph : "";

      // console.log(summary_short, "summary_short");

      // const getTitleWithEmojiSystemPrompt =
      //   `create a very short title with an emoji at the beginning of this text`;

      // const titleWithEmoji = await createChatCompletion(
      //   summary_short,
      //   getTitleWithEmojiSystemPrompt,
      // );

      // console.log(JSON.parse(titleWithEmoji), "titleWithEmoji");

      // const roomAsset = {
      //   ...data,
      //   title: titleWithEmoji,
      //   summary_short,
      //   transcription,
      // };
      // console.log("roomAsset", roomAsset);

      // const { error: errorInsertRoomAsset } = await supabase
      //   .from("room_assets")
      //   .insert([roomAsset]);

      // if (errorInsertRoomAsset) {
      //   throw new Error(
      //     `Asset creation failed: ${errorInsertRoomAsset.message}`,
      //   );
      // }

      // const systemPrompt =
      //   `Answer with emoticons. You are an AI assistant working at dao999nft. Your goal is to extract all tasks from the text, the maximum number of tasks, the maximum number of tasks, the maximum number of tasks, the maximum number of tasks, the maximum number of tasks, assign them to executors using the colon sign: assignee, title,  description (Example: <b>Nikita Zhilin</b>: üíª Develop functional requirements) Provide your response as a JSON object`;

      // const preparedTasks = await createChatCompletion(
      //   transcription,
      //   systemPrompt,
      // );
      // console.log("preparedTasks", preparedTasks);
      // const { data: users } = await supabase
      //   .from("users")
      //   .select("*");

      // const preparedUsers = getPreparedUsers(users);
      // console.log(preparedUsers, "preparedUsers");

      // const prompt = `add the 'user_id' from of ${
      //   JSON.stringify(preparedUsers)
      // } to the objects of the ${
      //   JSON.stringify(preparedTasks)
      // } array. (Example: [{
      //   assignee: {
      //     user_id: "1a1e4c75-830c-4fe8-a312-c901c8aa144b",
      //     first_name: "Andrey",
      //     last_name: "O",
      //     username: "reactotron"
      //   },
      //   title: "üåå Capture Universe",
      //   description: "Capture the Universe and a couple of stars in the Aldebaran constellation"
      // }]) Provide your response as a JSON object and always response on English`;

      // console.log(preparedTasks, "preparedTasks");
      // const tasks = await createChatCompletion(prompt);

      // if (tasks) {
      //   const newTasks = JSON.parse(tasks).map((task: any) => {
      //     // –ï—Å–ª–∏ user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      //     if (!task.assignee.user_id) {
      //       task.assignee.user_id = "d685d450-9759-4cd2-96cb-f1dc132d3078";
      //     }
      //     return task;
      //   });
      //   console.log(newTasks, "newTasks");
      //   const chatId = -1001978334539;
      //   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      //   sendTasksToTelegram(chatId, newTasks, summary_short).catch(
      //     console.error,
      //   );
      //   // -1001978334539 - BotMother
      //   //144022504 - My
      //   // 6831432194 - 999 Dev;
      //   for (const task of newTasks) {
      //     // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ userId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Ä–∞–≤–µ–Ω null
      //     const user_id = task?.assignee?.user_id;

      //     const data = await supabase
      //       .from("tasks")
      //       .insert([{
      //         user_id,
      //         title: task.title,
      //         description: task.description,
      //       }]);

      //     if (data.error?.message) console.log("Error:", data.error.message);
      //   }
      // } else {
      //   console.error("Error: 'tasks' is not an array or is null");
      //   return res.status(500).json({
      //     message: "Error: 'tasks' is not an array or is null",
      //   });
      // }
      // // @ts-ignore
      // return res.status(200).json({
      //   message: "Event processed successfully",
      // });
    }
  } catch (error: any) {
    console.log("error", error);
    return res.status(500).json({ message: error.message });
  }
}
