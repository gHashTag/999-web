import { createUser } from "./create-user";
import { getQuestion } from "./get-question";
import { resetProgress } from "./reset-progress";
import { getBiggest } from "./get-biggest";
import { pathIncrement } from "./path-increment";
import { updateProgress } from "./update-progress";
import { trueCounter } from "./true-counter";
import { getUid } from "./get-uid";
import { getAiFeedback } from "./get-ai-feedback";
import { updateResult } from "./update-result";
import { webhookCallback } from "grammy";
import { botMother } from "@/utils/telegram/bot";

botMother.command("start", async (ctx: any) => {
  await ctx.replyWithChatAction("typing");
  createUser(ctx);
  ctx.reply(
    `Hi, ${ctx.update.message?.from.first_name}! üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–µ—Å—Ç–æ–≤ ‚Äì –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üñ•Ô∏è‚ú® `,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç!", callback_data: "start_test" }],
        ],
      },
    },
  );
});

botMother.on("message:text", async (ctx: any) => {
  await ctx.replyWithChatAction("typing");
  const text = ctx.message.text;
  try {
    const feedback = await getAiFeedback(text);
    await ctx.reply(feedback, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI:", error);
  }
});

botMother.on("callback_query:data", async (ctx: any) => {
  await ctx.replyWithChatAction("typing");
  const callbackData = ctx.callbackQuery.data;
  const isHaveAnswer = callbackData.split("_").length === 4;

  if (callbackData === "start_test") {
    try {
      resetProgress(ctx.callbackQuery.from.username || "");
      const questionContext = {
        lesson_number: 1,
        subtopic: 1,
      };

      const questions = await getQuestion(questionContext);
      if (questions.length > 0) {
        const {
          topic,
          image_lesson_url,
        } = questions[0];

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.</u></i>\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: 0XP </b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",
            callback_data: `javascript_01_01`,
          }],
        ];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.replyWithPhoto(image_lesson_url, {
          caption: messageText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        return;
      } else {
        ctx.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }
    } catch (error) {
      console.error(error);
    }
  }

  if (!isHaveAnswer) {
    try {
      const [language, lesson, subtopic] = callbackData.split("_");
      let questions;
      if (!isNaN(Number(lesson)) && !isNaN(Number(subtopic))) {
        // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é.
        questions = await getQuestion({
          lesson_number: Number(lesson),
          subtopic: Number(subtopic),
        });
      } else {
        // –û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
        console.error(
          "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(114):",
          lesson,
          subtopic,
          callbackData,
        );
        await ctx.reply(
          "–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
        );
        return;
      }
      const {
        question,
        variant_0,
        variant_1,
        variant_2,
        id,
      } = questions[0];

      const user_id = await getUid(ctx.callbackQuery.from.username || "");
      if (!user_id) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      const trueCount = await trueCounter(user_id);
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageText =
        `<b>–í–æ–ø—Ä–æ—Å ‚Ññ${id}</b>\n\n${question}\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: ${trueCount}XP </b>`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
      const inlineKeyboard = [
        [{
          text: variant_0 || "–í–∞—Ä–∏–∞–Ω—Ç 1",
          callback_data: `${callbackData}_0`,
        }],
        [{
          text: variant_1 || "–í–∞—Ä–∏–∞–Ω—Ç 2",
          callback_data: `${callbackData}_1`,
        }],
        [{
          text: variant_2 || "–ù–µ –∑–Ω–∞—é",
          callback_data: `${callbackData}_2`,
        }],
      ];
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageCaption({
        reply_markup: { inline_keyboard: inlineKeyboard },
        caption: messageText,
        parse_mode: "HTML",
      });
    } catch (error) {
      console.error(error);
    }
  }

  if (isHaveAnswer) {
    try {
      const [language, lesson_number, subtopic, answer] = callbackData.split(
        "_",
      );
      const questionContext = {
        lesson_number: Number(lesson_number),
        subtopic: Number(subtopic),
      };

      const questions = await getQuestion(questionContext);
      if (questions.length > 0) {
        const {
          correct_option_id,
        } = questions[0];

        const user_id = await getUid(ctx.callbackQuery.from.username || "");
        if (!user_id) {
          await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }

        const path = `${language}_${lesson_number}_${subtopic}`;
        const biggestSubtopic = await getBiggest(Number(lesson_number));

        let isTrueAnswer = null;
        if (correct_option_id === Number(answer)) {
          isTrueAnswer = true;
          ctx.reply("‚úÖ");
        } else {
          isTrueAnswer = false;
          ctx.reply("‚ùå");
        }
        await updateProgress({ user_id, isTrue: isTrueAnswer, path: path });
        const newPath = await pathIncrement({
          path,
          isSubtopic: biggestSubtopic === Number(subtopic) ? false : true,
        });
        const trueCount = await trueCounter(user_id);

        if (newPath === "javascript_30_01") {
          const correctProcent = trueCount / 230 * 100;
          if (correctProcent >= 80) {
            await updateResult({
              user_id,
              language: "javascript",
              value: true,
            });
            ctx.reply(
              `<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç! </b>\n\nüéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${trueCount}XP –∏–∑ 230XP.`,
              { parse_mode: "HTML" },
            );
          } else {
            await updateResult({
              user_id,
              language: "javascript",
              value: false,
            });
            ctx.reply(
              `<b>ü•≤ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! </b>\n\nüéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${trueCount}XP –∏–∑ 230XP.`,
              { parse_mode: "HTML" },
            );
          }
        }
        const [newLanguage, newLesson, newSubtopic] = newPath.split("_");
        const newQuestions = await getQuestion({
          lesson_number: Number(newLesson),
          subtopic: Number(newSubtopic),
        });
        const { topic, image_lesson_url } = newQuestions[0];
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageText =
          `${topic}\n\n<i><u>–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.</u></i>\n\n<b>üéØ –í–∞—à —Å—á—ë—Ç: ${trueCount}XP </b>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        const inlineKeyboard = [
          [{
            text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É",
            callback_data: newPath,
          }],
        ];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.replyWithPhoto(image_lesson_url, {
          caption: messageText,
          parse_mode: "HTML",
          reply_markup: { inline_keyboard: inlineKeyboard },
        });
        return;
      } else {
        ctx.reply("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      }
    } catch (error) {
      console.error(error);
    }
  }
});

export default async function handler(req: any, res: any) {
  const handleUpdate = webhookCallback(botMother, "std/http");
  if (typeof req.json === "function") {
    try {
      handleUpdate(req, res);
      res.status(200).end();
    } catch (err) {
      console.error(err);
    }
  } else {
    console.error("–ú–µ—Ç–æ–¥ json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ req");
  }
}